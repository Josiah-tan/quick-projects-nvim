* What Is quick-projects-nvim?

- This is a neovim plugin used to navigate quickly between projects
- It is designed specifically for tmux, with partial support for linux
  terminals

* Screening
- Get a GIF or video to show this plugin

* Plugin Dependencies and Installation

- this requires you to get telescope and its own dependencies
  - Note that telescope is neovim 0.5 + only
    - so build your neovim from source, or get the latest release!
- I'm also assuming that you are using
  [[https://github.com/junegunn/vim-plug][vim-plug]] here
  - but feel free to use whatever package manager that you like!

#+BEGIN_SRC vim
    " This is a requirement, which implements some useful window management
    "   items for neovim
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lua/plenary.nvim'

    " fuzzy finder etc...
    Plug 'nvim-telescope/telescope.nvim'    
    " compiled fzy sorter (hence faster)
    Plug 'nvim-telescope/telescope-fzy-native.nvim'

    "Plugin for quick_projects
    Plug 'Josiah-tan/quick-projects-nvim'
#+END_SRC

* Guidelines for absolute beginners (if you've used a nvim plugin before feel free to skip!)

- If this is your first ever plugin that you have downloaded and
  configured, don't worry, we've all been there before, this section is
  just for you!

** Method 1 (using .lua files)

- I recommend learning from this
  [[file:website][https://github.com/nanotee/nvim-lua-guide#where-to-put-lua-files]].

** Method 2 (using the .vimrc)

- Of course you can also just chuck all the configurations in the vimrc, and embed them as lua scripts
- Here's an example of how you could call the lua function "print", within vimscript: 

#+BEGIN_SRC vim
    lua << EOS
	print("hello world")
    EOS
#+END_SRC

- For the rest of the documentation, lua injection notation will be excluded (i.e. lua << EOS and EOS)

* Basic Usage
- For this section it is assumed that the plugin has been installed
** Basic Setup

- So here's an example to call the setup function and enable the global mappings in your .vimrc

#+BEGIN_SRC lua
require('quick_projects').setup(
{
	enable_global_mappings = true
})
#+END_SRC

- by default:
	- global mappings are disabled to ensure no conflicts with other keybindings, upon installation

** Enabling Mappings

- The code below shows the global mappings that are created if enabled

#+BEGIN_SRC lua
    vim.api.nvim_set_keymap("n", "<Leader>qp", [[ <Esc><Cmd>lua require('quick_projects.builtins').quickProjects()<CR>]], {noremap = true, silent = true, expr = false})
    vim.api.nvim_set_keymap("n", "<Leader>qm", [[ <Esc><Cmd>lua require('quick_projects.builtins').quickMarks()<CR>]], {noremap = true, silent = true, expr = false})

    vim.api.nvim_set_keymap("n", "<Leader>qj", [[ <Esc><Cmd>lua require('quick_projects.builtins').navMark({idx = 1})<CR>]], {noremap = true, silent = true, expr = false})
    vim.api.nvim_set_keymap("n", "<Leader>qk", [[ <Esc><Cmd>lua require('quick_projects.builtins').navMark({idx = 2})<CR>]], {noremap = true, silent = true, expr = false})
    vim.api.nvim_set_keymap("n", "<Leader>ql", [[ <Esc><Cmd>lua require('quick_projects.builtins').navMark({idx = 3})<CR>]], {noremap = true, silent = true, expr = false})
    vim.api.nvim_set_keymap("n", "<Leader>q;", [[ <Esc><Cmd>lua require('quick_projects.builtins').navMark({idx = 4})<CR>]], {noremap = true, silent = true, expr = false})
#+END_SRC

** Creating Project Paths

- create a folder structure that looks like this (note that some of the use of .txt files):

- ~/.config/.quick\under{}projects/
  - projects/
    - university.txt
      + ~/Desktop/uni/mechanics/
      + ~/Desktop/uni/electrical/
    - work.txt
      + ~/Desktop/work/resumes/
      + ~/Desktop/work/lectures/
    - personal.txt
      + ~/Desktop/personal/code/
      + ~/Desktop/personal/google\under{}kickstart/
  - marks/
    - marks.txt

** Usage Tutorial

- run the command in vim (within tmux)

#+BEGIN_SRC vim
:lua require('quick_projects.builtins').quickProjects()
#+END_SRC

and type "google" and you will see the directory that you want pop up in the options

- After this you can do the following (by default):
	- press ctrl + t:
		- open vim in this directory with "vim ."
	- press ctrl + s:
		- open session in vim in this directory with vim -S session.vim (assuming that you did a :mks session earlier on)
			- if there is no session, then behave like ctrl + t
	- press alt + m:
		- open session in vim in this directory and add a project mark to marks.txt
			- if mark already exists, behave like ctrl + s

- what happens with tmux?
- If you selected "~/Desktop/personal/google\under{}kickstart/"
	- tmux will create / change to
		- a tmux session with name "personal"
		- a window with name "~/Desktop/personal/google\under{}kickstart/"

* Customised Usage
** Global Setup
- debug\_mode\_on: gives some information about what the plugin is doing
-
#+BEGIN_SRC lua
require('quick_projects').setup(
{
	debug_mode_on = false,
	enable_global_mappings = false,
})
#+END_SRC

* Guidelines For Developers

- first uninstall the plugin (to prevent conflicts)?
  - currently I'm doing this, but I'm sure there's a better way of
    managing everything
- set rtp (runtime path) that of the repository

#+BEGIN_SRC vim
" here's an example of how you could do this 
set rtp+=~/Desktop/josiah/neovim/quick_projects/
#+END_SRC

- then use a custom mapping to develop and test the code as shown below
	- note that RELOAD performs a fresh read of any changes that you make to the builtins file in the example

#+BEGIN_SRC lua
vim.api.nvim_set_keymap("n", "<Leader>qp", [[ <Esc><Cmd>lua RELOAD('quick_projects.builtins').quickProjects()<CR>]], {noremap = true, silent = true, expr = false})
#+END_SRC

* README TODO
- [ ] add some testing procedures
- [X] add links to other repositories
- [ ] add screening
- [X] add customisation capabilities
- [ ] add more coded examples
